# -*- python -*-
# ex: set filetype=python:

import re

c = BuildmasterConfig = {}

c['title'] = "Freifunk-Falter"
c['titleURL'] = "http://berlin.freifunk.net"
c['buildbotURL'] = "http://buildbot.berlin.freifunk.net/"
c['db_url'] = "sqlite:///state.sqlite"

# SLAVES
from slaves import build_slaves, slavenames
c['workers'] = build_slaves
#c['slavePortnum'] = 9989

# SCHEDULERS
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
from buildbot.schedulers.timed import Periodic

builder_names = [
    "apm821xx",
    "ar71xx",
    "arc770",
    "archs38",
    "armvirt",
    "at91",
    "ath25",
    "ath79",
    "bcm53xx",
    "brcm2708",
    "brcm47xx",
    "brcm63xx",
    "cns3xxx",
    "gemini",
    "imx6",
    "ipq40xx",
    "ipq806x",
    "kirkwood",
    "lantiq",
    "layerscape",
    "malta",
    "mediatek",
    "mpc85xx",
    "mvebu",
    "mxs",
    "octeon",
    "octeontx",
    "omap",
    "oxnas",
    "pistachio",
    "ramips",
    "rb532",
    "samsung",
    "sunxi",
    "tegra",
    "x86",
    "zynq"
    ]

feed_builders = [
    "build_falter_feed"
    ]


c['schedulers'] = []
"""c['schedulers'].append(
    SingleBranchScheduler(
        name="falter githook",
        change_filter=filter.ChangeFilter(
            branch_re='.*',
            repository='https://github.com/Freifunk-Spalter/builter'
            ),
        treeStableTimer=10,
        builderNames=builder_names
    )
)"""

c['schedulers'].append(SingleBranchScheduler(
        name="build_packagefeed",
        change_filter=filter.ChangeFilter(
            project='/Freifunk-Spalter/packages',
            branch=['master','openwrt-19.07']),
        treeStableTimer=300,
        builderNames=feed_builders
        )
)

c['schedulers'].append(Periodic(
    name="weekly",
    branch="feature/build_all_packagesets",
    builderNames=builder_names,
    periodicBuildTimer=7*24*60*60
    )
)

c['schedulers'].append(Periodic(
    name="daily_master",
    branch="feature/build_all_packagesets",
    builderNames=builder_names,
    periodicBuildTimer=24*60*60
    )
)

c['schedulers'].append(
	ForceScheduler(
        name="force",
        builderNames=builder_names
        )
	)


# BUILDERS
from buildbot.process.factory import BuildFactory
from buildbot.config import BuilderConfig
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot.steps.transfer import DirectoryUpload
from buildbot.steps.master import MasterShellCommand
from buildbot.process.properties import Interpolate, renderer
from buildbot.steps.worker import RemoveDirectory
from datetime import date


def is_release_step(step):
    branch = step.getProperty("branch") or 'was_not_set'
    return re.match(".*\d+\.\d+\.\d+$", branch)


cmd_checkoutSource = Git(
    repourl='git://github.com/Freifunk-Spalter/builter',
    branch="master",   # this can get changed by html.WebStatus.change_hook()
                       # by notification from GitHub of a commit
    workdir="build/falter-builter",
    mode='full'
    )

feed_conf_interpolate = Interpolate(
    "'s/\(packages_berlin\.git\^\)\([a-f0-9]\{40,40\}\)/\1%(prop:revision)s/'"
    ),

def repo_url(props):
    base_url = "http://buildbot.berlin.freifunk.net/buildbot"
    branch = props.getProperty("branch")
    target = props.getProperty("buildername")
    is_release_branch = re.match("\d+\.\d+\.\d+$", branch)
    if is_release_branch:
        return "{}/stable/{}/{}/packages".format(
            base_url,
            branch,
            target
            )
    else:
        return "{}/unstable/{}/{}/packages".format(
            base_url,
            target,
            props.getProperty("buildnumber")
            )


@renderer
def cmd_make_command(props):
    command = ['nice', './build_falter']
    #cpus = props.getProperty('cpus_per_build')
    #if cpus:
    #    command.extend(['-j', str(cpus+1)])
    #else:
    #    command.extend(['-j', '2'])
    command.extend(["all"])
    command.extend(["19.07"])
    command.extend([props.getProperty('buildername')])
    #command.extend(["VERSION_REPO=" + repo_url(props)])
    #command.extend(['IS_BUILDBOT=yes'])
    return command


cmd_make = ShellCommand(
    command=cmd_make_command,
    workdir="build/falter-builter",
    haltOnFailure=True
    )

#upload_branch_name = Interpolate("%(prop:branch)s/")
upload_directory = Interpolate("/usr/local/src/www/htdocs/buildbot/unstable/"+ date.today().strftime("%Y-%m-%d") +"/%(prop:branch)s/")

cmd_mastermkdir = MasterShellCommand(
    command=[
        "mkdir",
        "-p",
        "--mode=a+rx",
        upload_directory
    ])

slave_src_directory = Interpolate(
    "falter-builter/firmwares/"
)

cmd_uploadPackages = DirectoryUpload(
    workersrc=slave_src_directory,
    masterdest=upload_directory
    )

cmd_masterchmod = MasterShellCommand(
    command=[
        "chmod",
        "-R",
        "o+rX",
        upload_directory
    ])

cmd_cleanup = RemoveDirectory(
    dir="build/falter-builter",
    alwaysRun=True
    )

cmd_rsync_release = MasterShellCommand(
    command=[
        "rsync",
        "-av",
        "--delete",
        upload_directory,
        Interpolate("/usr/local/src/www/htdocs/buildbot/stable/%(prop:branch)s/%(prop:buildername)s")
        ],
    doStepIf=is_release_step
    )

cmd_create_release_dir = MasterShellCommand(
    command=[
        "mkdir",
        "-m755",
        "-p",
        Interpolate("/usr/local/src/www/htdocs/buildbot/stable/%(prop:branch)s/")
        ],
    doStepIf=is_release_step
    )

image_factory = BuildFactory([
    cmd_checkoutSource,
    cmd_make,
    cmd_mastermkdir,
    cmd_uploadPackages,
    cmd_masterchmod,
    cmd_create_release_dir,
    cmd_rsync_release,
    cmd_cleanup
    ])

def create_builder_config(builder_name):
    return BuilderConfig(
        name=builder_name,
        workernames=slavenames,
        factory=image_factory
    )



feed_checkoutSource = Git(
    repourl='git://github.com/Freifunk-Spalter/repo_builder',
    branch="master",   # this can get changed by html.WebStatus.change_hook()
                       # by notification from GitHub of a commit
    workdir="build/falter-repo-builder",
    mode='full'
    )

feed_create_tmpdir = ShellCommand(
    name="create tmp dir",
    command=[
    "mkdir",
    "-p",
    "tmp"
    ])

@renderer
def feed_make_command(props):
    command = ['nice',
	'./build_all_targets',
	'19.07.5',
	'src-git falter https://github.com/Freifunk-Spalter/packages.git',
	Interpolate('%(prop:builddir)s/tmp')
	]
    return command

feed_make = ShellCommand(
    name="build feed",
    command=feed_make_command,
    workdir="build/falter-repo-builder",
    haltOnFailure=True
    )

upload_dir = Interpolate("/usr/local/src/www/htdocs/buildbot/feed/new/%(prop:branch)s/")
feed_master_empty_dir = MasterShellCommand(
    name="clear upload dir",
    command=[
        "rm",
        "-rf",
        upload_dir
        ]
)

feed_mastermkdir = MasterShellCommand(
    name="create upload dir",
    command=[
        "mkdir",
        "-p",
        "--mode=a+rx",
        upload_dir
        ]
)

worker_src_dir = Interpolate("%(prop:builddir)s/tmp/")
feed_uploadPackages = DirectoryUpload(
    workersrc=worker_src_dir,
    masterdest=upload_dir
    )

feed_masterchmod = MasterShellCommand(
    name="chmod upload dir",
    command=[
        "chmod",
        "-R",
        "o+rX",
        upload_dir
    ])

feed_sign_packages = MasterShellCommand(
    name="sign packages",
    command=[
        "/usr/local/src/sign_packages.sh",
        upload_dir
        ]
)


#def feed_branch_stable(step):
#    branch = step.getProperty("branch") or 'was_not_set'
#    return re.match(".*\d+\.\d+$", branch)

# TODO: Nicht der branch vom repo-builder, sondern der branch aus der githook (package-repo)
#stable_dir = Interpolate("/usr/local/src/www/htdocs/buildbot/feed/%(prop:branch)s/")
#feed_move_feed_stable = MasterShellCommand(
#    command=[
#        "rm", "-rf", stable_dir, "&&",
#        "mv", upload_dir, stable_dir
#    ],
#    doStepIf=feed_branch_stable
#)

feed_cleanup = RemoveDirectory(
    dir="build/falter-repo-builder",
    alwaysRun=True
    )

feed_factory = BuildFactory([
    feed_checkoutSource,
    feed_create_tmpdir,
    feed_make,
    feed_master_empty_dir,
    feed_mastermkdir,
    feed_uploadPackages,
    feed_masterchmod,
    feed_sign_packages,
    feed_cleanup
    ])

def create_feed_builder(builder_name):
    return BuilderConfig(
        name=builder_name,
        workernames=slavenames,
        factory=feed_factory
    )


c['builders'] = list(map(create_builder_config, builder_names))
c['builders'].extend(list(map(create_feed_builder, feed_builders)))


c['www'] = dict(
	port=8010,
	plugins=dict(waterfall_view={}, console_view={}, grid_view={}),
	change_hook_dialects={
    'github': {
        'secret': 'c3600bf6160cf2c8536b260111b97a339',
        'strict': True
        }
    }
)

c['protocols'] = { 'pb': { 'port': 9989 } }

# STATUS TARGETS
#from buildbot.status import html
#from buildbot.status.web import authz
#from buildbot.status import words
#from buildbot.status.mail import MailNotifier
#
#c['status'] = []
#c['status'].append(html.WebStatus(
#    http_port=8010,
#    change_hook_dialects={'github': True},
#    authz=authz.Authz(
#        gracefulShutdown=False,
#        forceBuild=True,
#        forceAllBuilds=False,
#        pingBuilder=False,
#        stopBuild=False,
#        stopAllBuilds=False,
#        cancelPendingBuild=False,
#        )
#    )
#    )
#c['status'].append(words.IRC(
#    "irc.freenode.net",
#    "freifunkbuildbot",
#    channels=["#freifunk-berlin"],
#    notify_events={
#        'exception':        1,
#        'successToFailure': 1,
#        'failureToSuccess': 1,
#        }
#    )
#    )
#
#c['status'].append(
#    MailNotifier(
#        fromaddr="buildbot@buildbot.berlin.freifunk.net",
#        mode="change"
#        )
#    )
