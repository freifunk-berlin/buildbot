# -*- python -*-
# ex: set filetype=python:

import re

c = BuildmasterConfig = {}

c['title'] = "Freifunk"
c['titleURL'] = "http://berlin.freifunk.net"
c['buildbotURL'] = "http://buildbot.berlin.freifunk.net:8010/"
c['db_url'] = "sqlite:///state.sqlite"

# SLAVES
from slaves import build_slaves, slavenames
c['slaves'] = build_slaves
c['slavePortnum'] = 9989

# SCHEDULERS
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.changes import filter
from buildbot.schedulers.timed import Periodic

builder_names = [
    "ar71xx",
    "ar71xx_mikrotik",
    "mpc85xx",
    "ramips",
    "x86"
    ]

c['schedulers'] = []
c['schedulers'].append(
    SingleBranchScheduler(
        name="berlin githook",
        change_filter=filter.ChangeFilter(
            branch_re='.*',
            repository='https://github.com/freifunk-berlin/firmware'
            ),
        treeStableTimer=10,
        builderNames=builder_names
    )
)

c['schedulers'].append(
    SingleBranchScheduler(
        name="halle githook",
        change_filter=filter.ChangeFilter(
            branch_re='.*',
            repository='https://github.com/FreifunkHalle/firmware-halle'
            ),
        treeStableTimer=10,
        builderNames=['halle_ar71xx']
    )
)

c['schedulers'].append(Periodic(
    name="weekly",
    branch="master",
    builderNames=builder_names,
    periodicBuildTimer=7*24*60*60
    )
)

# BUILDERS
from buildbot.process.factory import BuildFactory
from buildbot.config import BuilderConfig
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot.steps.transfer import DirectoryUpload
from buildbot.steps.master import MasterShellCommand
from buildbot.process.properties import Interpolate, renderer
from buildbot.steps.slave import RemoveDirectory


def is_release_step(step):
    branch = step.build.getProperty("branch")
    return re.match("\d+\.\d+\.\d+", branch)

cmd_checkoutSource = Git(
    repourl='git://github.com/freifunk-berlin/firmware.git',
    branch="master",   # this can get changed by html.WebStatus.change_hook()
                       # by notification from GitHub of a commit
    workdir="build/firmware",
    mode='full'
    )

feed_conf_interpolate = Interpolate(
    "'s/\(packages_berlin\.git\^\)\([a-f0-9]\{40,40\}\)/\1%(prop:revision)s/'"
    ),

halle_cmd_checkoutSource = Git(
    repourl='git://github.com/FreifunkHalle/firmware-halle.git',
    branch="master",
    workdir="build/firmware",
    mode='full'
    )

halle_cmd_make = ShellCommand(
    command=[
        "nice",
        "make",
        "-j2",
    ],
    workdir="build/firmware",
    haltOnFailure=True
    )


@renderer
def repo_url(props):
    base_url = "http://buildbot.berlin.freifunk.net/buildbot"
    branch = props.getProperty("branch")
    target = props.getProperty("buildername")
    is_release_branch = re.match("\d+\.\d+\.\d+", branch)
    if is_release_branch:
        return "{}/stable/{}/{}/packages".format(
            base_url,
            branch,
            target
            )
    else:
        return "{}/unstable/{}/{}/packages".format(
            base_url,
            target,
            props.getProperty("buildnumber")
            )

@renderer
def cmd_make_command(props):
    command = ['nice', 'make']
    cpus = props.getProperty('cpus_per_build')
    if cpus:
        command.extend(['-j', str(cpus+1)])
    else:
        command.extend(['-j', '2'])
    command.extend(["TARGET=" + props.getProperty('buildername')])
    command.extend(["VERSION_REPO=" + repo_url(props)])
    return command


cmd_make = ShellCommand(
    command=cmd_make_command,
    workdir="build/firmware",
    haltOnFailure=True
    )

upload_directory = Interpolate(
    "/usr/local/src/www/htdocs/buildbot/unstable/%(prop:buildername)s/%(prop:buildnumber)s/"
    )

cmd_mastermkdir = MasterShellCommand(
    command=[
        "mkdir",
        "-p",
        upload_directory
    ])

slave_src_directory = Interpolate(
    "firmware/firmwares/%(prop:buildername)s/"
)

cmd_uploadPackages = DirectoryUpload(
    slavesrc=slave_src_directory,
    masterdest=upload_directory
    )

cmd_masterchmod = MasterShellCommand(
    command=[
        "chmod",
        "-R",
        "o+rX",
        upload_directory
    ])

cmd_cleanup = RemoveDirectory(
    dir="build/firmware",
    alwaysRun=True
    )

cmd_rsync_release = MasterShellCommand(
    command=[
        "rsync",
        "-av",
        "--delete",
        upload_directory,
        Interpolate("/usr/local/src/www/htdocs/buildbot/stable/%(prop:branch)s/%(prop:buildername)s")
        ],
    doStepIf=is_release_step
    )

cmd_create_release_dir = MasterShellCommand(
    command=[
        "mkdir",
        "-m755",
        "-p",
        Interpolate("/usr/local/src/www/htdocs/buildbot/stable/%(prop:branch)s/")
        ],
    doStepIf=is_release_step
    )

factory = BuildFactory([
    cmd_checkoutSource,
    cmd_make,
    cmd_mastermkdir,
    cmd_uploadPackages,
    cmd_masterchmod,
    cmd_create_release_dir,
    cmd_rsync_release,
    cmd_cleanup
    ])

halle_factory = BuildFactory([
    halle_cmd_checkoutSource,
    halle_cmd_make,
    cmd_cleanup
    ])


def create_builder_config(builder_name):
    return BuilderConfig(
        name=builder_name,
        slavenames=slavenames,
        factory=factory
    )

c['builders'] = map(create_builder_config, builder_names)
c['builders'].append(BuilderConfig(
    name="halle_ar71xx",
    slavenames=slavenames,
    factory=halle_factory
    ))

# STATUS TARGETS
from buildbot.status import html
from buildbot.status.web import authz
from buildbot.status import words
from buildbot.status.mail import MailNotifier

c['status'] = []
c['status'].append(html.WebStatus(
    http_port=8010,
    change_hook_dialects={'github': True},
    authz=authz.Authz(
        gracefulShutdown=False,
        forceBuild=True,
        forceAllBuilds=False,
        pingBuilder=False,
        stopBuild=False,
        stopAllBuilds=False,
        cancelPendingBuild=False,
        )
    )
    )
c['status'].append(words.IRC(
    "irc.freenode.net",
    "freifunkbuildbot",
    channels=["#freifunk-berlin"],
    notify_events={
        'exception':        1,
        'successToFailure': 1,
        'failureToSuccess': 1,
        }
    )
    )

c['status'].append(
    MailNotifier(
        fromaddr="buildbot@buildbot.berlin.freifunk.net",
        mode="change"
        )
    )
